{
	"info": {
		"_postman_id": "54cd0b8c-3a3b-483c-9e36-b6f0f8fd1ff0",
		"name": "Trello API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32586560"
	},
	"item": [
		{
			"name": "Get All Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 30 seconds\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", () => {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/members/me/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Board name matches the unique name used in creation\", () => {\r",
							"    pm.expect(responseData.name).to.be.equal(pm.variables.get(\"boardName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Property 'closed' should be false\", () => {\r",
							"    pm.expect(responseData).to.have.property(\"closed\");\r",
							"    pm.expect(responseData.closed).to.be.false;\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"boardId\", responseData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let uniqueName = \"Board-\" + Math.floor(Math.random() * 100);\r",
							"\r",
							"pm.collectionVariables.set(\"boardName\", uniqueName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}&defaultLists=false",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "defaultLists",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has property 'name' of type string\", () => {\r",
							"    pm.expect(responseData).to.have.property(\"name\");\r",
							"    pm.expect(responseData.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TO DO List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"let uniqueToDoListId = responseData.id;\r",
							"pm.collectionVariables.set(\"ToDoListId\", uniqueToDoListId);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain all required fields\", () => {\r",
							"    pm.expect(responseData).to.have.all.keys(\"id\", \"name\", \"closed\", \"color\", \"idBoard\", \"pos\", \"type\", \"datasource\", \"limits\");\r",
							"});\r",
							"\r",
							"pm.test(\"Closed field is false and is of type Boolean\", () => {\r",
							"    pm.expect(responseData).to.have.property(\"closed\");\r",
							"    pm.expect(responseData.closed).to.be.a(\"boolean\");\r",
							"    pm.expect(responseData.closed).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"idBoard match the expected board ID\", () => {\r",
							"    pm.expect(responseData.idBoard).to.be.equal(pm.variables.get(\"boardId\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name=To Do&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "To Do"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Unique List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"let uniqueListId = responseData.id;\r",
							"pm.collectionVariables.set(\"uniqueListId\", uniqueListId);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"List name matches the unique name used in creation\", () => {\r",
							"    pm.expect(responseData.name).to.be.equal(pm.variables.get(\"uniqueListName\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let uniqueName = \"List-\" + Math.floor(Math.random() * 1000);\r",
							"\r",
							"pm.collectionVariables.set(\"uniqueListName\", uniqueName);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/lists?name={{uniqueListName}}&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{uniqueListName}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Lists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response array is not empty\", () => {\r",
							"    pm.expect(responseData).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(responseData).to.be.an(\"array\").that.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test(\"List with a speciffic name is present\", () => {\r",
							"    let listNames = responseData.map((list) => list.name);\r",
							"\r",
							"    pm.expect(listNames).to.includes(pm.variables.get(\"uniqueListName\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}/lists?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"let uniquCardId = responseData.id;\r",
							"pm.collectionVariables.set(\"cardId\", uniquCardId);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Card name is correct\", () => {\r",
							"    pm.expect(responseData.name).to.equal(\"Sign-up for Trello\");\r",
							"});\r",
							"\r",
							"pm.test(\"Labels and attachment are empty\", () => {\r",
							"    pm.expect(responseData.labels).to.be.empty;\r",
							"    pm.expect(responseData.attachments).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards?idList={{ToDoListId}}&key={{trelloKey}}&token={{trelloToken}}&name=Sign-up for Trello",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{ToDoListId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "Sign-up for Trello"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move Card To Unique List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Card ID is correct\", () => {\r",
							"    pm.expect(responseData.id).to.be.equal(pm.variables.get(\"cardId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Card is moved to the new list\", () => {\r",
							"    pm.expect(responseData.idList).to.be.equal(pm.variables.get(\"uniqueListId\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards/{{cardId}}?key={{trelloKey}}&token={{trelloToken}}&idList={{uniqueListId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{uniqueListId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete The Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Limts property exist and is an empty object\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"limits\");\r",
							"    pm.expect(pm.response.json().limits).to.be.an(\"object\");\r",
							"    pm.expect(Object.keys(pm.response.json().limits)).to.have.lengthOf(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/cards/{{cardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{cardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete The Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"_value is null\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"_value\");\r",
							"    pm.expect(pm.response.json()._value).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/1/boards/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://api.trello.com"
		},
		{
			"key": "trelloKey",
			"value": "f6b430b39ff0b87c3f92bd9d57ba511d"
		},
		{
			"key": "trelloToken",
			"value": "ATTA06feef92f79af856490270a9306f89d592317e3c4412fe4de6343f9087294d30367D8F4D"
		},
		{
			"key": "boardId",
			"value": "default"
		},
		{
			"key": "ToDoListId",
			"value": "671fd8b026a745378fb485fe"
		},
		{
			"key": "cardId",
			"value": "671fdda7adac89b22d075606",
			"type": "string"
		},
		{
			"key": "boardName",
			"value": "default"
		},
		{
			"key": "uniqueListName",
			"value": "default",
			"type": "string"
		},
		{
			"key": "uniqueListId",
			"value": "default",
			"type": "string"
		}
	]
}